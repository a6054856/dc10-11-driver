【1】linux内核中的并发和竞态的解决方法
	3.信号量（重点掌握）
		当一个进程获取到信号量之后，后一个进程
		也想获取到这个信号量，此时后一个进程就
		处于休眠的状态。
		
		特点：
			1.获取不到信号量的时候进程处于休眠的状态
			  此时不消耗cpu资源
			2.信号量工作在进程上下文
			3.在信号量保护的临界区中可以有延时，耗时
			  甚至休眠的操作。
		API:
			struct semaphore sem;
			//定义信号量
			void sema_init(struct semaphore *sem, int val)
			//信号量的初始化
			//信号量本身是一个同步的机制，只有当val被设置为1
			//的时候才有互斥的效果。如果把val设置为0它是一种
			//同步的机制。
			
			void down(struct semaphore *sem);
			//上锁，如果获取不到锁就会休眠
			int  down_trylock(struct semaphore *sem);
			//尝试获取锁，获取锁成功返回0，不成功返回1
			//如果获取不到锁是不会休眠的
			
			void up(struct semaphore *sem);
			//解锁
		
	4.互斥体（掌握）
		互斥体跟信号的特特点类似，当一个进程获取到互斥体
		之后，另外一个进程也想获取这个互斥体，此时后一个
		进程处于休眠状态。获取不到互斥体资源的时候，进程在
		休眠前会稍等一会儿。所以互斥体使用用在时间很短的反复
		进程状态切换的代码中。
	
		API:
			struct mutex mutex;
			//定义互斥体
			mutex_init(&mutex);
			//互斥体的初始化
			
			void  mutex_lock(struct mutex *lock)
			//上锁
			int mutex_trylock(struct mutex *lock)
			//尝试获取锁，如果返回值是1表示获取锁成功了
			//如果返回0表示获取锁失败了。
			
			void  mutex_unlock(struct mutex *lock)
			//解锁
		
	5.原子操作（掌握）
		原子操作的含义是把本次操作看成一个整体，在本次
		操作的时候是不可以被打断了。原因这个原子变量的
		赋值是通过内联汇编实现了。
	
		typedef struct {
			int counter;
		} atomic_t; 
			
		
		API:
			atomic_t atm = ATOMIC_INIT(1);
			//定义并初始化原子变量
			
			上锁：
			atomic_inc_and_test(&atm)
			//让原子变量的值加1和0比较，如果结果为0，表示
			//获取锁成功了，返回真，如果结果不为0，表示
			//获取锁失败了，返回假
			
			atomic_dec_and_test(&atm)
			//让原子变量的值减1和0比较，如果结果为0，表示
			//获取锁成功了，返回真，如果结果不为0，表示
			//获取锁失败了，返回假
			
			解锁：
			atomic_inc(&atm)
			//让原子变量的值加1
			atomic_dec(&atm)
			//让原子变量的值减1
		
----------------------------------------------------------------------
【1】IO模型
	1.非阻塞
		当用户以非阻塞的方式打开一个文件的时候，
		如果调用read函数去读取数据的时候，不管这个
		数据是否准备好了，这个read函数都会立即返回。
		open("/dev/mycdev0",O_RDWR|O_NONBLOCK);
		read(fd,buf,sizeof(buf))
		------------------------------------------
		driver_open
		driver_read(){
			//不管硬件中的数据是否准备好了，都将
			//数据理解返回到用户空间。
		}
		
	2.阻塞
		当用户以阻塞的方式打开一个文件的时候，
		如果调用read函数去读取数据的时候，如果
		硬件的数据没有准备好，此时阻塞。当硬件
		中的数据准备好的时候，这个休眠的进程就
		会被唤醒了，然后应用这个read就不在阻塞了
		就能够拿到最新的数据了。
		open("/dev/mycdev0",O_RDWR);
		read(fd,buf,sizeof(buf))
		---------------------------------
		driver_open
		driver_read(){
			//如果用户已阻塞的形式去读取数据的时候，
			//如果数据没有准备好，需要在这个read函数
			//中让进程休眠。
			
			//1.判读用户打开文件的方式
			if(file->f_flags & O_NONBLOCK){
				//非阻塞
			}else{
				//2.如果condition为假休眠，为真不需要休眠
				ret = wait_event_interruptible(wq,condition);
				
			}
			
		}
		进程休眠的过程：
			wait_queue_head_t wq;
			//1.定义等待队列头
			
			init_waitqueue_head(q)	
			//2.初始化等待队列头
			
			wait_event(wq, condition)
			//（不可中断的等待态D）
			wait_event_interruptible(wq, condition)
			//3.（可中断的等待态S）
			功能：实现阻塞的函数
			参数：
				@wq:等待队列头
				@condition:condition代表数据是否准备好了
						   condition为0数据没有准备好，进程需要休眠
						   condition为真数据没有准备好，进程不需要休眠
			返回值：成功返回返回0，失败返回错误码
			
		
			阻塞函数的分析见：wait_event_interruptible.c这个文件
		
		唤醒的过程：
			condition = 1;
			wake_up(&wq);
			wake_up_interruptible(&wq);
			
			
			
	3.IO多路复用
	
	
	4.异步通知（信号驱动IO）














			
			
			
			
			
			
			
			
			
	
	
	
	
