【1】i2c设备驱动和总线驱动匹配成功之后
	 创建的结构体
	 struct i2c_client {
		unsigned short flags;
		//读写的标志位
		unsigned short addr;
		//从机地址
		char name[I2C_NAME_SIZE];
		//匹配成功时候的名字
		struct i2c_adapter *adapter;	
		//控制器驱动的对象
		struct i2c_driver *driver;
		//设备驱动的对象
		int irq;	
		//中断号，可以忽略
		struct list_head detected;
		//内核链表
	};
	注释：这个i2c_client结构体就是用户设备驱动对象
		  和总线驱动对象绑定的一个结构体对象。
		  
		  
【2】设备驱动如何封装和发送消息？
	1.消息的结构体
	struct i2c_msg {
		__u16 addr;	
		 //从机地址，7位 8位 10位
		 //https://www.totalphase.com/support/articles/200349176-7-bit-8-bit-and-10-bit-I2C-Slave-Addressing
		__u16 flags;
		// 0 写  I2C_M_RD 读   I2C_M_TEN 10位从机地址
		__u16 len;	
		//数据的长度
		__u8 *buf;	
		//发送数据的首地址
	};
	
	消息结构体的封装：有多少个起始位就有多少个消息，
				消息长度是以字节来表示的
	
	2.消息发送的函数
		int i2c_transfer(struct i2c_adapter *adap, 
			struct i2c_msg *msgs, int num)
		功能：发送消息
		参数：
			@adap:它既是总线驱动的对象
			@msgs:消息结构体的首地址
			@num :消息的个数
		返回值：成功返回想发送的消息的个数，失败非
		
	3.写消息函数的封装
	int i2c_write_reg(char reg,char val)
	{
		int ret;
		char wbuf[] = {reg,val};
		struct i2c_msg w_msg[1] = {
			[0] = {
				.addr  = client->addr,
				.flags = 0,
				.len   = 2,
				.buf   = wbuf,
			},			
		};

		ret = i2c_transfer(client->adapter, 
			w_msg, ARRAY_SIZE(w_msg));
		if(ret != ARRAY_SIZE(w_msg)){
			printk("send msg error\n");
			return -EAGAIN;
		}
		
		return 0;
	}
	
    4.读消息函数的封装
	int i2c_read_reg(char reg)
	{	
		int ret;
		char val;
		char rbuf[] = {reg};
		struct i2c_msg r_msg[] = {
			[0] = {
				.addr  = client->addr,
				.flags = 0,
				.len   = 1,
				.buf   = rbuf,
			},
			[1] = {
				.addr  = client->addr,
				.flags = I2C_M_RD,
				.len   = 1,
				.buf   = &val,
			},
		};
		
		ret = i2c_transfer(client->adapter, 
				r_msg, ARRAY_SIZE(r_msg));
			if(ret != ARRAY_SIZE(r_msg)){
				printk("receive msg error\n");
				return -EAGAIN;
			}
		
		return val;
	}
	
	练习：
		1.封装i2c读写函数并完成设备校验
-------------------------------------------------------

【1】块设备驱动
	磁头：一个磁盘有多少个面就有多少个磁头
	磁道：在一个磁头上可以有很多环，这些环就叫做磁道
	扇区：磁道上访问数据的最小的单位就是扇区，一个
		  扇区的大小就是512字节
		  
	1block = 512字节  1024字节  2048字节  4096字节
	1扇区  = 512字节
	
	块设备的能存储的数据=磁头*磁道*扇区*512
		
【2】块设备的框架		
user:
	open     read    write    close
-------------------(io请求)-----------------------------------
kernel	|VFS: （block_device）
	    |	将用户的io请求转化成BIO(block，input ,output),
	    |	在物理内存上连续的bio会被合成以request，这个request
	    |	会被放到内核的一个队列上。
		|
	    |---------------------------------------------------------
	    |driver:gendisk
	    |	1.分配对象
	    |	2.对象初始化
	    |	3.初始化一个队列  head----request(read)----request(write)---...
	    |	4.硬盘设备的初始化
	    |	5.注册、注销
------------------------------------------------------------------		
haredware :   分配的内存（模拟真实的设备）（1M）
			 		
		
	1.gendisk的结构体对象
	struct gendisk {                                                                                                                                                                                                        
		int major;   //块设备的主设备号
		int first_minor; //起始的次设备号
		int minors; //设备的个数，分区的个数
		char disk_name[DISK_NAME_LEN]; //磁盘的名字
		struct disk_part_tbl  *part_tbl;
		//磁盘的分区表的首地址
		struct hd_struct part0;
		//part0分区的描述

		const struct block_device_operations *fops;
		//块设备的操作方法结构体
		
		struct request_queue *queue;
		//队列（重要）
		
		void *private_data;
		//私有数据
	};

	分区的结构体
	struct hd_struct {
		sector_t start_sect; //起始的扇区号
		sector_t nr_sects;   //扇区的个数
		sector_t alignment_offset;//对齐的方式                                                                                                     
		int  partno;        //分区号
	};
	
	//块设备的操作方法结构体
	struct block_device_operations {
		int (*open) (struct block_device *, fmode_t);
		int (*release) (struct gendisk *, fmode_t);
		int (*ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
		int (*getgeo)(struct block_device *, struct hd_geometry *);	
		//设置磁盘的磁头，磁道，扇区的个数的。
	}
		
	2.结构体对象的初始化
		struct gendisk *mydisk;
		
		struct gendisk *alloc_disk(int minors)
		//void put_disk(struct gendisk *disk)
		//归还引用计数
		功能：分配gendisk的内存，然后完成必要的初始化
		参数：
			@minors:分区的个数
		返回值：成功返回分配到的内存的首地址，失败返回NULL
		
		
		int register_blkdev(unsigned int major, const char *name)
		//void unregister_blkdev(unsigned int major, const char *name)
		功能：申请设备设备驱动的主设备号
		参数：
			@major ： 0：自动申请[1..255] 
			          >0 :静态指定 0-2^12
			@name  :名字  cat /proc/devices
		返回值：	
				major=0 ;成功返回主设备号，失败返回错误码
				major>0 :成功返回0 ，失败返回错误码
				
		struct request_queue *blk_init_queue(request_fn_proc *rfn,
		spinlock_t *lock)
		//void blk_cleanup_queue(struct request_queue *q)
		功能：初始化一个队列
		参数：
			@rfn:函数指针，队列的处理函数
			typedef void (request_fn_proc) (struct request_queue *q);
			@lock:自旋锁
		返回值：成功返回结构体指针，失败返回NULL 
		
		void set_capacity(struct gendisk *disk, sector_t size)
		功能：设置磁盘的容量
		
	3.注册、注销
		void add_disk(struct gendisk *disk)
		//注册
		void del_gendisk(struct gendisk *disk)
		//注销
		
	练习：
		1.编写虚拟块设备驱动的实例


【3】块设备驱动的API
	struct request *blk_fetch_request(struct request_queue *q)
	功能：从请求队列中获取request
	参数：
		@q:请求队列头
	返回值：成功返回获取到的request的指针，失败返回NULL
	
	rq_data_dir(rq)	
	功能：从request获取本次是读还是写
	参数：
		@rq:request
	返回值：READ 用户要读   WRITE用户要写
	
	struct request {
		sector_t __sector; //操作的扇区号
		unsigned int __data_len; //操作的数据总和的大小
		char *buffer;	   //用户的首地址
		unsigned int cmd_flags; //读写的方向READ 0  WRITE 1
		 bio->bi_size;    //本次biod读写的大小
	}
	sector_t blk_rq_pos(const struct request *rq)
	功能：从request中获取当前操作的扇区号（单位扇区）
		  这个扇区号是想要操作的磁盘上的扇区号
	
	int blk_rq_cur_bytes(const struct request *rq)
	功能：获取本次操作的读写的大小（单位字节）
	
	
	块设备驱动的测试：
		1.安装驱动
		sudo insmod mydisk.ko
		
		2.查看
		ls -l mydisk 
		brw-rw---- 1 root disk 251, 0 Dec  3 10:36 mydisk

		3.分区
		sudo fdisk -l
		查看ubuntu当前的分区清空
		
		sudo df -h
		查看ubuntu各个分区的使用百分比
		
		sudo fdisk /dev/mydisk
		对/dev/mydisk进行分区
		 d   delete a partition
		 m   print this menu
	     n   add a new partition
		 p   print the partition table
		 q   quit without saving changes
		 w   write table to disk and exit
		
		4.指定磁盘的格式
			sudo mkfs.ext2 /dev/mydisk1

		5.挂载使用
			mkdir ~/udisk
			sudo mount /dev/mydisk1 ~/udisk
		6.向这个目录下拷贝数据
			sudo cp ../dc71-81 . -a
		
		7.取消挂载
			sudo umount ~/udisk
		8读取数据
			sudo cat /dev/mydisk1 > mydisk.bin
		9查看
			sudo mount -o loop mydisk.bin udisk
			sudo umount  udisk
			







		  
		  
		  
		  
		  