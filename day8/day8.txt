【1】platform获取设备信息的过程
	struct resource *platform_get_resource(
		struct platform_device *dev,
		unsigned int type, unsigned int num)
	功能：获取设备信息
	参数：
		@dev :platform_device的结构体指针
		@type:资源的类型
		@num :同类类型中的第几个资源
	返回值：
		成功返回资源的结构体指针，
		失败返回NULL
	
	int platform_get_irq(struct platform_device *dev,
		unsigned int num)
	功能：获取中断类型的资源
	参数：
		@dev :platform_device的结构体指针
		@num :IORESOURCE_IRQ类型中的第几个资源
	返回值：成功返回中断号，失败返回错误码
	
	练习：
		1.在驱动中使用获取资源的函数来获取资源
		
【2】module_platform_driver宏的解析

	#define module_platform_driver(__platform_driver) 
    module_driver(platform_adc,
			platform_driver_register,                       
            platform_driver_unregister)
			
	#define module_driver(platform_adc,
		platform_driver_register, platform_driver_unregister) 
		
	module_platform_driver(platform_adc)
	
	static int __init platform_adc_init(void) 
	{ 
		return platform_driver_register(&platform_adc); 
	}                                                                                   
	static void __exit platform_adc_exit(void) 
	{                 
		platform_driver_unregister(&platform_adc); 
	} 
	module_init(platform_adc_init); 
	module_exit(platform_adc_exit);

【3】plafrom的idtable的匹配方式
	struct platform_device_id *id_table;
	//另外一种匹配的方法
			
	struct platform_device_id {
		char name[PLATFORM_NAME_SIZE];
		//用于匹配的名字
		kernel_ulong_t driver_data
		//向驱动传递的数据		
	};	
		
		
	struct platform_device_id idtable[] = {
		[0] = {
			.name = "ds18b20a",
			.driver_data = 0,
		},
		[1] = {
			.name = "ds18b20b"
			.driver_data = 1,
		},
		[2] = {
			.name = "ds18b20c"
			.driver_data = 2,
		},
		[3] = {
			/*end表示结束*/
		}
		
	};
		
---------------------------------------------------------------
【1】i2c硬件知识
	见图：i2c的硬件连接图.png


【2】i2c总线驱动
	i2c总线驱动遵从设备模型：device,bus,driver的模型
user:

--------|---------------------------------------------
kernel: |设备驱动层（driver）:驱动工程师编写的部分
		| 1.为应用层提供读写的接口
		| 2.根据用户的读写需求将数据发给控制器驱动
		|----------------------------------------------
		|核心层（bus）：核心层是内核工程师编写完成的，
		|功能：提供设备驱动和控制器驱动的注册和注销的方法
		|并完成设备驱动和控制器驱动的匹配的过程
		| i2c-core.c ：核心层的源文件
		|----------------------------------------------
		|控制器驱动层（总线驱动层）（device）
		|控制器驱动层是厂商编写完成了。功能：根据设备驱动
		|层发送过来的读写数据，控制器驱动完成对控制器寄存
		|器的设置，有控制器将数据完成收发工作
		| i2c-s3c2410.c:控制器驱动的层的源文件
		|        |
--------|--------|-------------------------------------
hardware:   |------------|	scl       ------------
			|            |----------- |          |
			|i2c的控制器 |	sda       |mma8451q  |
			|            |----------- |          |
			|            |            |          |
			--------------            ------------


	[1]i2c设备驱动的编写？
	1.i2c设备驱动分配的对象
		struct i2c_driver {
			int (*probe)(struct i2c_client *, const struct i2c_device_id *);
			//设备驱动和总线驱动匹配成功执行的函数
			int (*remove)(struct i2c_client *);
			//设备驱动和总线驱动分离的时候执行的函数
			struct device_driver driver;
			//父类，driver.name 就不在用于匹配了，但是必须填充
			const struct i2c_device_id *id_table;
			//idtable就是用于匹配的函数
		}
		
	2.注册
		#define i2c_add_driver(driver) \
			i2c_register_driver(THIS_MODULE, driver)
		
	3.注销
		void i2c_del_driver(struct i2c_driver *driver)
		
		
		module_i2c_driver(i2c_driver的变量);
		//这个宏完成入口，出口，注册，注销的功能
		
	练习：
		1.i2c总线驱动的实例
		
		
		                                                                                            
		
	[2]如何向控制器驱动提交用于匹配的名字？
	int i2c_register_board_info(int busnum,
		struct i2c_board_info const *info, unsigned len)
	功能：向控制器驱动提交信息
	参数：
		@busnum:总线号（控制器的序号）mma8451q使用的是总线号2
		@info  :提交的信息结构体
		struct i2c_board_info {
			char		type[I2C_NAME_SIZE];
			//用于匹配的名字
			unsigned short	addr;
			//从机地址 0x1c
		};
		@len :提交的信息结构体的个数
	返回值：成功返回0，失败返回错误码
	
	[3]如何添加用于匹配的名字？
	上述的代码在如下的文件中调用即可。
	kernel-3.4.39/arch/arm/plat-s5p6818/fs6818$ vi device.c
	 719 #include <linux/i2c.h>
	 720 
	 721 static struct i2c_board_info  mma8451q = {
	 722         .type   = "mma8451q",
	 723         .addr   = 0x1c,
	 724 };                                                                               
	1905 #elif defined(CONFIG_SENSORS_MMA8451) || defined(CONFIG_MXC_MMA8451_MODULE)
	1906     printk("plat: add g-sensor mma8451\n");
	1907         //i2c_register_board_info(2, &mma8451_i2c_bdi, 1);
	1908 #endif
	1909       i2c_register_board_info(2, &mma8451q, 1);
	 
	make uImage (重新编译内核)
	
	cp arch/arm/boot/uImage ~/tftpboot  (将内核拷贝到tftpboot目录)
	
	重启开发（加载编译好的内核）
	
	重新安装驱动看到如下现象：
	[root@farsight]#insmod mma8451q.ko 
	[   23.481000] /home/linux/dc10-11-driver/day8/mma8451q/mma8451q.c:mma8451q_probe:8
	[root@farsight]#rmmod mma8451q
	[   29.442000] /home/linux/dc10-11-driver/day8/mma8451q/mma8451q.c:mma8451q_remove:13
	[root@farsight]#





	
		
		
		
		
		