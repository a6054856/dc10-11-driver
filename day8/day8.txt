【1】platform获取设备信息的过程
	struct resource *platform_get_resource(
		struct platform_device *dev,
		unsigned int type, unsigned int num)
	功能：获取设备信息
	参数：
		@dev :platform_device的结构体指针
		@type:资源的类型
		@num :同类类型中的第几个资源
	返回值：
		成功返回资源的结构体指针，
		失败返回NULL
	
	int platform_get_irq(struct platform_device *dev,
		unsigned int num)
	功能：获取中断类型的资源
	参数：
		@dev :platform_device的结构体指针
		@num :IORESOURCE_IRQ类型中的第几个资源
	返回值：成功返回中断号，失败返回错误码
	
	练习：
		1.在驱动中使用获取资源的函数来获取资源
		
【2】module_platform_driver宏的解析

	#define module_platform_driver(__platform_driver) 
    module_driver(platform_adc,
			platform_driver_register,                       
            platform_driver_unregister)
			
	#define module_driver(platform_adc,
		platform_driver_register, platform_driver_unregister) 
		
	module_platform_driver(platform_adc)
	
	static int __init platform_adc_init(void) 
	{ 
		return platform_driver_register(&platform_adc); 
	}                                                                                   
	static void __exit platform_adc_exit(void) 
	{                 
		platform_driver_unregister(&platform_adc); 
	} 
	module_init(platform_adc_init); 
	module_exit(platform_adc_exit);

【3】plafrom的idtable的匹配方式
	struct platform_device_id *id_table;
	//另外一种匹配的方法
			
	struct platform_device_id {
		char name[PLATFORM_NAME_SIZE];
		//用于匹配的名字
		kernel_ulong_t driver_data
		//向驱动传递的数据		
	};	
		
		
	struct platform_device_id idtable[] = {
		[0] = {
			.name = "ds18b20",
			.driver_data = 0,
		},
		[1] = {
			.name = "ds18b20a"
			.driver_data = 1,
		},
		[2] = {
			.name = "ds18b20b"
			.driver_data = 2,
		},
		[3] = {
			/*end表示结束*/
		}
		
	};
		
		
		
		