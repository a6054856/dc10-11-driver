【1】IO多路复用
	在同一APP中想同时监听多个硬件的数据，此时
	就是适合使用IO多路复用的机制select/poll/epoll。
	使用select/poll/epoll同时监听多个硬件的数据，
	如果硬件中有数据准备好了，select/poll/epoll就
	会返回，然后就从准备好的文件描述符中将数据读取
	到用户空间即可。
	
	fd1 = open("/dev/mycdev",);
	fd2 = open("/dev/myxxxxx",);
	将这个两个文件描述符放入到文件描述符的集合中
	select/poll/epoll(都是对应驱动的poll函数)
	read(fd,buf,sizeof(buf));
------------------(系统调用swi)-----------------
kernel：|VFS：（虚拟文件系统层）
		|sys_open   sys_read  sys_write  
		|   sys_select
		|
		|
		|---------------------------------------
		|fops:
		|unsigned int (*poll) (struct file *file, 
		|	struct poll_table_struct *wait);
		|1.定义unsigned int mask = 0;
		|2.调用poll_wait(file,&wq,wait);
		|  （不会让进程休眠，只是提交等待队列头）
		|3.条件为真置位POLLIN/POLLOUT
		|4.返回mask
-------------------------------------------------------
hardware   设备1    设备2
	
	
	 sys_select函数的实现过程：
		1.将文件描述符的集合从用户空间
		  拷贝到内核空间（copy_from_user）。
		2.遍历这些文件描述符，从文件描述符
		  的表中取出一个文件描述符，通过文件
		  描述符找到对应的驱动，并调用驱动的
		  poll函数。
		  
		  fd->fd_array[fd]->file->fops->poll(file,wait);
		  
		  当调用驱动的poll函数的时候就可以拿到等待
		  队列头并且还能够拿到mask的值。如果这个mask
		  的值为0，继续遍历文件描述符表中的下一个文件描述符
		  
		3.如果上述编译的过程中所有的驱动返回的mask都为0，
		  此时代表所有的驱动的数据都没有准备好，如果数据
		  没有准备好，此时让进程休眠即可。如果有驱动的数据
		  准备好了这个休眠的进程就会被唤醒了。唤醒之后再次
		  执行2的步骤
		
		4.当mask的值不为0的时候就被mask对应的fd放入到准备好
		  的文件描述符的集合中，然后将准备好的文件描述符拷贝
		  到用户空间即可copy_to_user(用户的首地址,内核的首地址)。
		  
	
	问：select什么时候返回？
		1.当有文件描述符对应硬件的数据准备好的时候
		2.当超时时间到的时候也会返回
		3.当收到信号的时候select也会返回

	问：select函数的特点有什么？
		1.select最多只能够监听1024个文件描述符
		2.select有清空表的过程，每次都需要从
		  用户空间向内核空间拷贝表，效率比较低
		3.select被唤醒之后没有都需要重新遍历文
		 件描述符效率比较低。


	    poll的特点
		1.poll文件描述符没有个数限制
		2.poll没有清空表的过程，效率比select高
		3.poll被唤醒之后没有都需要重新遍历文
		 件描述符效率比较低。

		epoll的特点(本世纪最好用的IO多路复用机制)
		1.epoll文件描述符没有个数限制
		2.epoll没有清空表的过程，效率比select高
		3.epoll被唤醒之后不需要遍历文件描述符，epoll
		  是通过红黑树来实现的，准备好的文件描述符在
		  红黑树的最左侧，所以可以直接拿到并返回文件
		  描述符。
		  //https://www.cnblogs.com/Slime-kk-tech/p/13357407.html
		  //https://www.cnblogs.com/skywang12345/p/3245399.html
		  //kernel-3.4.39/lib$ ls rbtree.c 

	问：epoll如何使用的？
	#include <sys/epoll.h>
	int epoll_create(int size);
	功能：创建一个epoll的实例
	参数：
		@size:监听文件描述符的个数
		      现在这个值已经不再使用了，可以随便传递
	返回值：成功返回文件描述符epfd，失败返回-1置位错误码
	
	int epoll_ctl(int epfd, int op, 
		int fd, struct epoll_event *event);
	功能：控制文件描述符合在epfd中的增删改
	参数：
		@epfd:epoll的文件描述符
		@op :增，删，改
			EPOLL_CTL_ADD
			EPOLL_CTL_DEL
			EPOLL_CTL_MOD
		@fd :要监听的文件描述符
		@event:监听的事件的结构体
		   typedef union epoll_data {
               void        *ptr;
               int          fd;  
			   //赋值这个成员，读数据时使用
               uint32_t     u32;
               uint64_t     u64;
           } epoll_data_t;

           struct epoll_event {
               uint32_t     events;     
			   /* Epoll events  EPOLLIN/EPOLLOUT*/
               epoll_data_t data;        /* User data variable */
           };

	返回值：成功返回0，失败返回-1并置位错误码
		
	int epoll_wait(int epfd, struct epoll_event *events,
                      int maxevents, int timeout);
	功能：阻塞等待要监听的文件描述符
	参数：
		@epfd:epoll的文件描述符
		@events：返回的事件结构体
		@maxevents:最大监听的文件描述符的个数
		@timeout:超时时间
			0：立即返回
			>0:毫秒的超时时间
			-1：不关心超时
	返回值：成功返回准备好的文件描述符的个数
			返回0表示超时时间到了
			返回-1表示错误，并置位错误码
			
	
【2】异步通知（信号驱动IO）
	异步通知的IO模型，在应用程序通过signal注册一个
	信号的处理函数。也就是让应用层的进程监听这个信号
	当硬件中的数据准备好的时候，产生中断，在中断的处
	理函数中给应用程序发信号即可。应用程序收到信号后
	执行信号的处理函数，在信号处理函数中调用read函数
	来读取数据即可。
	
	user
		void handle_signal_func(int signo)
		{
			read(fd,buf,sizeof(buf));
		}
		//1.注册信号处理函数
		signal(SIGIO,handle_signal_func);
		
		//2.通过如下两个步骤调用驱动的fasync函数
		unsigned int flags=fcntl(fd,F_GETFL);
		fcntl(fd,F_SETFL,flags|FASYNC);
		
		//3.告诉内核接口信号的进程是哪一个
		fcntl(fd,F_SETOWN,getpid());
	--------------------------------------------------
		VFS: vi -t sys_fcntl
		SYSCALL_DEFINE3(fcntl, unsigned int, 
			fd, unsigned int, cmd, unsigned long, arg) {
			
			filp = fget_raw(fd);

			err = do_fcntl(fd, cmd, arg, filp);
			{
				 switch (cmd) {
				   case F_GETFL:
						err = filp->f_flags;
						break;
					case F_SETFL:
						err = setfl(fd, filp, arg);
						break;
				 }
				
			}
			arg = filp->f_flags|FASYNC 
		  if (((arg ^ filp->f_flags) & FASYNC) && filp->f_op &&                     
				filp->f_op->fasync) {
			error = filp->f_op->fasync(fd, filp, (arg & FASYNC) != 0);

		}

	--------------------------------------------------
	kernel:fops:
		int (*fasync) (int fd, struct file *filp, int on);
		功能：完成发信号用到的结构体对象的初始化
		
		grep ".fasync =" * -nR
		
		如何初始化？
		int fasync_helper(int fd, struct file * filp, 
			int on, struct fasync_struct **fapp)
		
		如何发信号？
		void kill_fasync(struct fasync_struct **fp,SIGIO,POLL_IN)  

	
	练习：
		1.异步通知的IO模型练习

--------------------------------------------------------------------
【1】linux内核中的中断
	中断是基于硬件实现的，不管有没有linux内核，中断的异常
	处理流程都是如下的四大步骤三小步：
	
	当异常产生时, ARM core:
		拷贝 CPSR 到 SPSR_<mode>
		设置适当的 CPSR 位： 
			改变处理器状态进入 ARM 状态  
			改变处理器模式进入相应的异常模式
			设置中断禁止位禁止相应中断 (如果需要)
		保存返回地址到 LR_<mode>
		设置 PC 为相应的异常向量
	返回时, 异常处理需要:
		从 SPSR_<mode>恢复CPSR
		从LR_<mode>恢复PC 

	中断的执行的流程见：linux内核中断.png

【2】在linux内核中注册中断
	int request_irq(unsigned int irq, 
		irq_handler_t handler, unsigned long flags,
	    const char *name, void *dev)
	功能：在linux内核中注册一个中断
	参数：
		@irq:软中断号
			      A   B    C    D    E
		    组号  0   1    2    3    4
			gpiono          = m*32+n   //m组号，n组内偏移
			irqno(软中断号) = gpio_to_irq(gpiono);

		@handler:中断的处理函数
			typedef irqreturn_t (*irq_handler_t)(int irqno, void *dev);
			
		@flags:中断的触发方式
				IRQF_TRIGGER_NONE	  使用默认触发方式
				IRQF_TRIGGER_RISING	  上升沿
				IRQF_TRIGGER_FALLING  下降沿
				IRQF_TRIGGER_HIGH	  高电平
				IRQF_TRIGGER_LOW	  低电平
				IRQF_DISABLED	     快速中断（在执行本中断的时候关闭其他中断）
				IRQF_SHARED		     中断共享
				
		@name :中断的名字,通过如下命令可以查看
			   cat /proc/interrupts 
		@dev  :向中断处理函数传递的参数
	返回值：成功返回0，失败返回错误码	
	
	
	void free_irq(unsigned int irq, void *dev_id)
	功能：注销中断
	参数：
		@irq:软中断号
		@dev_id：request_irq的最后一个参数传递的值
	返回值：无	
	
【3】安装驱动的时候出现如下错误：
	[root@farsight]#insmod farsight_irq.ko 
	[   20.468000] register irq 146 error
	insmod: can't insert 'farsight_irq.ko': Device or resource busy
	猜测软中断号被占用了
	
	cat /proc/interrupts
	146:     GPIO  nxp-keypad
	154:     GPIO  nxp-keypad
	
	如何解决？
	将这个“nxp-keypad”名对应的驱动从内核中卸载掉即可
	grep "nxp-keypad" * -nR
	arch/arm/mach-s5p6818/include/mach/devices.h:
	48:#define DEV_NAME_KEYPAD  "nxp-keypad"

	grep "DEV_NAME_KEYPAD" * -nR
	drivers/input/keyboard/nxp_io_key.c:324:	
	.name	= DEV_NAME_KEYPAD,

	
	如何将nxp_io_key.c从内核中选配掉
	Makefile：
		 obj-$(CONFIG_KEYBOARD_NXP_KEY)  += nxp_io_key.o       
	
	Kconfig：
		config KEYBOARD_NXP_KEY                                                               
		tristate "SLsiAP push Keypad support"
		depends on ARCH_CPU_SLSI
		help
		  Say Y here to enable the gpio keypad on SLsiAP SoC based board.

	make menuconfig：
		 <> "SLsiAP push Keypad support"
		
	make uImage
	
	cp uImage ---->tftpboot
	
	重启开发板
	
	
	作业：
		1.编写中断的代码
		2.编写ADC（73）的驱动，
		  要求加入中断，要求使用阻塞的IO模型读数据
		
		
		


