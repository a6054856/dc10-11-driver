【1】字符设备驱动的框架
user:
	fd=open("/dev/myled",);  read(fd,);   write(fd,);  close(fd,);
		   |
		   |--ls -i----->inode号<---文件系统识别文件的标号
						   |
---------------------------|--------------
kernel:                    |
					struct inode{
						umode_t i_mode; //文件权限
						uid_t	i_uid;  //用户的id
						gid_t	i_gid;  //组的id
						unsigned long	i_ino; //inode号
						dev_t	i_rdev; //设备号
						union {
							struct block_device	*i_bdev;
							//块设备驱动的结构体
							struct cdev		*i_cdev;
							//字符设备驱动的结构体
						};

					}
					
		字符设备驱动
		struct cdev *i_cdev;
		dev_t  i_rdev;
		---------			
	   |		 |
	   |         |
	   |         |
	   -----------
	  struct cdev {
		const struct file_operations *ops;
		//操作方法结构体
		struct list_head list;
		//内核链表（cdev放入到了内核的链表中）
		dev_t dev;
		//设备号
		unsigned int count;
		//设备的个数
	 };
	   
------------------------------------------
hardware:   LED

问：inode是干什么的？什么时候产生的inode？	
	只要一个文件存在，那它就对应一个inode结构体，
	这个inode结构体就是用来描述这个文件的性信息的。
	通过inode就可以唯一找到一个inode结构体
	
问：字符设备驱动的编写流程？（分步）
	1.分配对象
		struct cdev cdev;
		struct cdev *cdev;
		struct cdev *cdev_alloc(void)
		功能:为字符设备驱动的对象分配内存
			：(如果内存申请成功会初始化cdev中的链表)
		参数：
			@无
		返回值：成功返回结构体指针，失败返回NULL
		
		void kfree(void *p)
		功能：释放cdev结构体指针的内存
		参数：
			@p:cdev的结构体的首地址
		返回值：无
		
	2.对象的初始化
		void cdev_init(struct cdev *cdev,
			const struct file_operations *fops)
		功能：初始化cdev结构体（fops）
		参数：
			@cdev:cdev的结构体指针
			@fops:操作方法结构体指针
		返回值：无
		
		申请设备号：
			int register_chrdev_region(dev_t from, 
				unsigned count, const char *name)
			功能:静态指定想要注册的设备号
			参数：
				@from:设备号的起始的值
				@count:个数
				@name:设备驱动的名字
			返回值：成功返回0，失败返回错误码
			
			int alloc_chrdev_region(dev_t *dev, 
				unsigned baseminor, unsigned count,
				const char *name)
			功能：动态申请设备号
			参数：
				@dev:申请到的设备号
				@baseminor:次设备号的起始的值
				@count:个数
				@name:名字
			返回值：成功返回0，失败返回错误码			
			
			void unregister_chrdev_region(dev_t from, unsigned count)
			功能：向系统归还设备号
			参数：
				@from:设备号的起始的值
				@count:个数
			返回值：无
	3.对象的注册
		int cdev_add(struct cdev *p, 
			dev_t dev, unsigned count)
		功能：字符设备驱动的注册
		参数：
			@p:cdev的结构体指针
			@dev:设备号
			@count：个数
		返回值：成功返回0，失败返回错误码
		
	4.对象的注销
		void cdev_del(struct cdev *p)
		功能：注销一个字符设备驱动
		参数：
			@p:cdev的结构体指针
		返回值：无

	练习：
		1.字符设备驱动分步实现的流程

	
问：file结构体的功能是什么？什么时候产生的？
	在一个进程中调用open函数的时候就会产生一个
	文件描述符fd。在调用open函数的时候会产生一个
	file结构体的对象，这个file结构体就是用来就来
	本次打开文件时候的各种信息的的对象。这个file
	结构体就被放到fd_array[fd]数组中，这个数组的
	下标就是文件描述符。
	
	fd--->fd_array[fd]--->struct file-->f_op-->
	-->read write relase
	
	
	struct file {
		unsigned int 	f_flags; //打开文件的读写方式
		fmode_t			f_mode;  //权限
		loff_t			f_pos;   //文件的流置针（lseek）
		const struct file_operations	*f_op;
		                         //这个就是操作方法结构体
		void		 *private_data;
					//私有数据，它的作用就是在驱动的open
					//read write close函数的相互传递参数
					//使用的
	}

	作业：(根据设备文件识别设备)
	
		设备文件：mycdev0   mycdev1   mycdev2
				  500,0     500,1    500,2
		--------------------------------------
				  mycdev字符设备驱动
				  （在驱动中只要能拿到当前文件
				  的次设备号，那么就知道用户正在访问
				  哪一个文件，如果访问的是文件mycdev0,
				  并且写入到内核的值是1，那么在驱动中
				  就将红灯点亮即可。）
		---------------------------------------
				   RED     GREEN      BLUE

		echo 1 > /dev/mycdev0   红灯亮
		echo 0 > /dev/mycdev0   红灯灭
		echo 1 > /dev/mycdev1   绿灯亮
		echo 0 > /dev/mycdev1   绿灯灭
		
--------------------------------------------------------------------
【1】linux内核中的并发和竞态的解决方法
	有多个进程同时访问同一个驱动临界资源，这时候竞态
	就会产生。
	
	竞态产生的根本原因？
	1.对于单核cpu来说，如果内核支持抢占就会产生竞态。
	2.对于多核cpu来说，核与核之间可以产生竞态
	3.中断和进程间也会产生竞态
	4.中断和更高优先级的中断间会产生竞态？？？
	（arm架构下这句话是错误的）
	
	竞态的解决方法如下？
	[1]顺序执行
	[2]互斥执行
	
	1.中断屏蔽（了解）
		中断屏蔽只针对单核cpu有效，不管是进程间的切换或者
		是中断和进程的切换都是需要中断参与的，所以将中断
		关闭掉之后，就可以解决竞态。
		1.只能在单核cpu中使用
		2.有可能导致用户数据的丢失
		3.如果中断屏蔽的时间比较长还可能会导致内核的崩溃
		local_irq_disable();
		//临界区（临界区所占用的时间尽可能的短）
		local_irq_enable();
		
	2.自旋锁（重点掌握）(忙等锁)
		自旋锁是针对多核CPU设计的，当一个进程占用
		自旋锁之后，另外一个进程也想或者这把锁，此时
		后一个进程处于自旋状态（原地打转）。
		
		特点：
			1.自旋锁多核cpu有效
			2.在忙等的期间是需要消耗cpu资源的
			3.自旋锁工作在中断上下文 
			4.自旋锁保护的临界区尽可能的短小，
			不能够有延时，耗时，甚至休眠的操作，
			也不能够有copy_to_user/copy_from_user函数，
			也不能够执行进程调度的函数（schedule()）。
			5.自旋锁会产生死锁（在同一个进程中多次获取
			  同一把未解锁的锁）
			6.自旋锁在上锁的时候会关闭抢占
			
		API:
			spinlock_t lock; //定义自旋锁
			spin_lock_init(&lock)//初始化自旋锁
			void spin_lock(spinlock_t *lock) //上锁
			void spin_unlock(spinlock_t *lock)//解锁
			
	3.信号量（重点掌握）
	4.互斥体（掌握）
	5.原子操作（掌握）

















